script(type="text/javascript").
	Vue.prototype.moment = moment;
	Vue.prototype.marked = marked;
	Vue.prototype.SignaturePad = SignaturePad;
	Vue.prototype.$ = $;
	Vue.prototype.htmldiff = htmldiff;
	Vue.prototype.window = window;
	//- Vue.prototype.d3 = d3;
	//- Vue.prototype.xth = xth;
	Vue.prototype.L = L;
	//- Vue.prototype.CensusReporter = CensusReporter;
	if (typeof tinymce === 'object') Vue.prototype.tinymce = tinymce;
	new Vue({
		el: '#vue',
		data: function data(){
			return {
				dragging: {isDragging: false, y: 0},
				dropped: {drop: false, layers: false, new: false},
				isSafari: /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === "[object SafariRemoteNotification]"; })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification)),
				csrfToken: this.parseObj(!{JSON.stringify(csrfToken)}),
				initbounds: null,
				tempstyles: [],
				colorTimeout: null,
				buf: [],
				//- attribute: null,
				//- attributes: [],
				availablelayers: this.ifNullThenArr(!{JSON.stringify(availablelayers)}),
				c: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],
				//['#39B54A', '#D9E021', '#FBB03B', '#FC644D', '#ED1C24'],
				//- lvl: 'h',
				wWidth: window.innerWidth,
				wHeight: window.innerHeight,
				btn: { x: (window.innerWidth / 2), 
					y: (window.innerHeight/ 2),
					r: 21,
					vis: (!this.mapActive || !this.mapEdit ? null : 'block')
				},
				//- h: 0,
				//- i: 0,
				//- j: 0,
				//- m: 0,
				signable: this.parseBool(!{JSON.stringify(signable)}),
				unsigned: this.parseBool(!{JSON.stringify(unsigned)}),
				avail: this.parseBool(!{JSON.stringify(avail)}),
				type: this.parseObj(!{JSON.stringify(type)}),
				pu: this.parsePu(!{JSON.stringify(pu)}),
				loggedin: (this.parseObj(!{JSON.stringify(session)}) !== '' && this.parseObj(!{JSON.stringify(session.loggedin)}) !== '' ? this.parseObj(!{JSON.stringify(session.loggedin)}) : null ),
				menu: this.parseObj(!{JSON.stringify(menu)}),
				dat: this.parseObj(!{JSON.stringify(dat)}),
				doc: this.parseObj(!{JSON.stringify(doc)}),
				layers: this.parseObj(!{JSON.stringify(layers)}),
				position: (!this.parseObj(!{JSON.stringify(session.position)}) ? {lat: 40, lng: -111.89, zoom: 6}/*null*/ : this.parseObj(!{JSON.stringify(session.position)})),
				edit: (this.parseObj(!{JSON.stringify(doc)}) === '' ? null : this.parseObj(!{JSON.stringify(doc)}).index),
				//- chindexes: [],
				chindex: 0,
				//- dindexes: [],
				did: (this.parseObj(!{JSON.stringify(doc)}) === '' ? null : this.parseObj(!{JSON.stringify(doc)})._id),
				cursor: null,
				//- input: '',
				//- fixedPug: '',
				map: '',
				mapActive: (this.parseBool(!{JSON.stringify(mapActive)})),
				mapReady: false,
				mapEdit: false,
				mapEditable: false,
				tileLayer: null,
				dataLayer: '',
				lMarker: '',
				thickness: 65,
				res: (window.innerWidth < 600),
				dPath: this.dPathAttr(),
				tinymce: '',
				dfi: 0,
				diff: null,
				web: true,
				export: this.parseBool(!{JSON.stringify(exports)}),
				ff: this.parseObj(!{JSON.stringify(ff)}),
				newDoc: {tempGeo:[],placetype:'',place:null,tiind:null,xmlid:'',chind:null,chtitle:''},						
				placemenu: false,
				
				placetypes: [{
					ind: 0,
					name: 'Nation',
					url: '/json/usstates.json'
				},
				{
					ind: 1,
					name: 'State',
					url: '/json/usstates.json'
				},
				{
					ind: 2,
					name: 'County',
					url: '/json/uscounties.json'
				}],
				modal: {msg:null},
				uploadisreplace: false,
				uploadchtitle: null,
				dragind: null,
				latlngs: null,
				//- gp: (this.parseObj(#{session.importgdrive}) !== '' ? this.parseObj(!{JSON.stringify(gp)}) : null),
				sliderIndex: 1,
				sliderInterval: '',
				sliderTimeout1: '',
				sliderTimeout2: '',
				str: this.parseObj(!{JSON.stringify(str)}),
				ts: this.ifNullThenArr(!{JSON.stringify(ts)}),
				can: [],
				lyr: {},
				geo: [],
				tis: [
					{
						ind: 0,
						name: 'in support of legislation',
						code: 'BILLS-',
						chapter: [
							{
								ind: 115,
								name: 'United States Congress',
								code: 'hres',
								section: [
									{
										ind: 108,
										name: 'House Simple Resolution (H. Res.)',
										code: 'ih'
									}
								]
							}
						]
					},
					{
						ind: 1,
						name: 'in Solidarity',
						chapter: [
							{
								ind: 0,
								name: 'Jurisdiction'
							}
						]
					},
					{
						ind: 2,
						name: 'Candidate for Public Office',
						chapter: [
							{
								ind: 0,
								name: 'Jurisdiction'
							}
						]
					},
					{
						ind: 3,
						name: 'Environmental Impact Statement',
						chapter: [
							{
								ind: 0,
								name: 'Jurisdiction'
							}
						]
					},
					{
						ind: 4,
						name: 'Geography',
						chapter: [
							{
								ind: 0,
								name: 'Jurisdiction'
							}
						]
					}
				],
				xml: //this.parseXML(
					this.parseObj(!{JSON.stringify(xml)})
				//)
				,
				xmlnode: '',
				accordions: [[]],
				sliderOpacity: 1,
				gpo: null,
				latlng: {lat: 40, lng: -111.8},
				//- lyrs: [],
				credit: this.getCredit(),
				base: 0,
				baseMaps: [
					{
						url: 'https://api.mapbox.com/styles/v1/tbushman/ciq7gm0ov008kbfm580v9mm9c/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoidGJ1c2htYW4iLCJhIjoiSmI0aU94OCJ9.SZytljBzoWupPUYeu_OR9A',
						attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>'
					},
					{
						url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
						attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
					}
					
				],
				zfactor: (0.01 * (!this.map ? 6 : (18 - this.map.getZoom() ) )),
				cZF: null,
				viewerList: false,
				censusVars: null,
				censusLoad: {tempGeo:[],placetype:'',cats:null,cat:null} ,
				json: {},
				mapCtrl: false,
				exclude: ['visibility', 'extrude', 'tessellate', 'INTPTLAT10', 'INTPTLON10', 'STATEFP10', 'COUNTYFP10', 'TRACTCE10', 'BLKGRPCE10', 'GEOID10', 'ST_KEY', 'CIMID', 'SITEADDRES', 'ZIPCODE', 'NORTHING', 'EASTING'],
				files: []

			}
		},
		components: {
			canvasc: {
				data: function() {
					return {
						signaturePad: null,
						ctx: null,
						dataUrl: null,
						pts: null,
						cW: window.innerWidth,
						cH: window.innerHeight,
						pu: this.$parent.pu
					}
				},
				mounted: function(){
					var self = this;
					self.signaturePad = new SignaturePad(self.$refs.canv, {
						onEnd: function() {
							self.$refs.canv.style['letter-spacing'] = '0px'
							var ctx = self.$refs.canv.getContext('2d');
							ctx.font = '12px serif';
							
							var ts = '/'+self.pu.properties.givenName+'/'+moment().utc().format();
							ctx.beginPath();
							ctx.fillText(ts, 23, 132);
							ctx.closePath();
							self.dataUrl = self.signaturePad.toDataURL()
							self.pts = self.signaturePad.toData();
							self.$emit('update', self.dataUrl, ts, self.$refs.canv);
							
						},
						onBegin: function() {
							// clear timestamp only
							var ctx = self.$refs.canv.getContext('2d');
							ctx.clearRect(23, 123, 277, 32);

						}
					});
				},
				methods: {
					clearCanv(){
						var self = this;
						var ctx = self.$refs.canv.getContext('2d');
						ctx.clearRect(0, 0, 300, 150);
						
					}
				},
				template: 
				`
				<div class="row" style="text-align: center;">
				<canvas
					id="maincanvas"
					ref="canv"
				></canvas>
				<a role="button" @click="clearCanv" title="Clear signature" v-text="'Clear signature'"></a>
				</div>
				`
			}
		},
		watch: {
			accordions: {
				deep: true,
				handler(accordions) {
					var self = this;
					self.accordions = accordions
				}
			}
		},
		
		updated: function(){
			var self = this;
			//- if (self.colorTimeout) clearTimeout(self.colorTimeout);
		},
		mounted: function(){
			$(document).ready(function(){
				document.addEventListener('keydown', function(event) {
					var keyName = event.key;
					if (keyName === 'Enter') event.preventDefault()
				});
				//- setTimeout(function(){
				//- 	$('.submenu.drop').slideUp(100);
				//- 	$('.slidedown').slideUp(100);
				//- },3000)

			})
			var self = this;
			$(document).on('click', '.href', function(e){
				e.stopPropagation();
			});
			var modal = document.getElementById('modal');
			if (self.type === 'geo') {
				// prompt geolocation
				var pos = null;
				if (navigator.geolocation) {
					var options = {
						enableHighAccuracy: true,
						timeout: 5000,
						maximumAge: 0
					};
					navigator.geolocation.getCurrentPosition(function(position) {
						pos = {
							lat: position.coords.latitude,
							lng: position.coords.longitude
						};
						//- console.log(pos)
						self.handleLocationOutcome(true, pos);
					}, function() {
						self.handleLocationOutcome(false, pos);
					}, options);
				} else {
					// Browser doesn't support Geolocation
					self.handleLocationOutcome(false, pos);
				}
			
			} 
			//- else if (!self.mapActive) {
			//- 
			//- 	if (!self.doc || self.doc === '') {
			//- 		if (!self.dat || self.dat === '') {
			//- 			self.accordions = [[]];
			//- 		} else {
			//- 			self.accordions = self.dat.map(function(data){
			//- 				return []
			//- 			});
			//- 		}
			//- 	} else {
			//- 		if (!self.dat || self.dat === '') {
			//- 			self.accordions = [[self.doc.index]];
			//- 		} else {
			//- 			self.accordions = self.dat.map(function(data){return data.map(function(doc){return doc.index})});
			//- 		}
			//- 		self.edit = self.doc._id;
			//- 		self.did = self.edit;
			//- 
			//- 	}
			//- }

			//- const tempstyles = (!self.doc || self.doc.properties.layers.length === 0 ? [] : self.doc.properties.layers)
			//- self.tempstyles = JSON.parse(JSON.stringify(tempstyles));
			window.addEventListener('resize', self.resizeFrame);

			self.loadMap(function(dataCoords){
				/* TODO DRY this out: */
				//- console.log(self.map.getPixelOrigin())
				//- console.log(self.map.project(dataCoords), dataCoords);
				//- console.log(self.lMarker.getLatLng());
				//- console.log(self.map.latLngToLayerPoint(self.lMarker.getLatLng()))
				if (dataCoords) {
					self.map.panTo(dataCoords);
					if (self.dataLayer && typeof self.dataLayer.bringToBack === 'function') {
						//- self.layers.forEach(function(layer){
						//- 	if (!self.isPointCoords(layer.geometry.coordinates)) {
						//- 			self.lyr[layer._id].bringToBack()
						//- 	}
						//- })	
						setTimeout(function(){
							if (self.json) {
								Object.keys(self.json).forEach(function(key){
									var result = self.json[key];
									console.log(result)
									var coords = (!result.features || result.features.length === 0 ? result.geometry.coordinates : result.features[0].geometry.coordinates)
									var isPointCoords = self.isPointCoords(coords);
									if (isPointCoords && self.lyr[key]) {
										self.lyr[key].bringToFront()
									}
								})
							}
						
							self.dataLayer.bringToBack();
							self.tileLayer.bringToBack();
							self.mapReady = true;
						}, 1000)
					
					} 
				}
				
				self.map.on('click', function(){
					self.mapCtrl = false;
				})
				self.map.on('dragstart', function(){
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					self.viewerList = false;
				});
				self.map.on('movestart', function(){
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					self.viewerList = false;
				})
				self.map.on('zoomstart', function(){
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					self.viewerList = false;
				})
				
				self.map.on('moveend', function(e){
					self.wWidth = window.innerWidth;
					self.wHeight = window.innerHeight;
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					if (self.geo.length > 0) {
						self.viewerList = true;
					}
				})
				self.map.on('dragend', function(e) {
					self.wWidth = window.innerWidth;
					self.wHeight = window.innerHeight;
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					if (self.geo.length > 0) {
						self.viewerList = true;
					}

				})
				self.map.on('zoomend', function(e) {
					self.wWidth = window.innerWidth;
					self.wHeight = window.innerHeight;
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					if (self.geo.length > 0) {
						self.viewerList = true;
					}
				
				})

				if (self.tinymce === ''  && $('#description')[0] && typeof tinymce === 'object') {
					//- console.log($('#description')[0])
					self.tinymce = tinymce.init({
						menubar: false,
						statusbar: false,
						theme: 'inlite',
						inline: true,
						selector: "#description",
						plugins: 'lists',
						valid_elements: '*[*]',
						setup: function (editor) {
							//- editor.ui.registry.addButton('footnote', {
							editor.addButton('footnote', {
								text: 'Add footnote',
								icon: 'link',
								onclick: function(){
									self.doc.properties.footnotes.push(
										''
									);
									editor.insertContent('<a v-if="doc.properties.footnotes && doc.properties.footnotes['+(self.doc.properties.footnotes.length - 1)+']" href="ftnref'+(self.doc.properties.footnotes.length)+'"><span class="super">'+(self.doc.properties.footnotes.length)+'</span></a>')
									//editor.insertContent('<span v-if="doc.properties.footnotes && doc.properties.footnotes['+(self.doc.properties.footnotes.length - 1)+']" class="super">'+(self.doc.properties.footnotes.length)+'</span>')
									$('#footnote'+self.doc.properties.footnotes.length - 1).focus()
								}
							})
						},
						selection_toolbar: 'bold italic underline strikethrough | bullist numlist | outdent indent blockquote | subscript superscript | footnote'
					});
				}
				var latestWeek = (!self.doc || !self.doc.properties.credit || self.doc.properties.credit === '' || self.doc.properties.credit.indexOf('records/weeklyreports/current/filings/Week_') === -1 ? null : +(self.doc.properties.credit.split('current/filings/Week_')[1].split('-Filing_Report')[0]))
				
				if (latestWeek) {
					$.post('/utahcourts/' + self.doc._id + '/' +latestWeek +'', function(err, doc) {
						console.log(doc)
					})
				} else {
					//temporary
					if (self.doc && self.doc !== '') {
						$.post('/utahcourts/' + self.doc._id + '/04', function(err, doc) {
							console.log(doc)
						})
					}
				}

			})
		},
		beforeDestroy: function(){
			//TODO clearTimout
			var self = this;
			clearInterval(self.sliderInterval);
			clearTimeout(self.sliderTimeout1);
			clearTimeout(self.sliderTimeout2)
			if (self.colorTimeout) clearTimeout(self.colorTimeout);
			window.removeEventListener('resize', self.resizeFrame)

		},
		methods: Object.assign({}, baseFunctions, mapFunctions, adminFunctions)
	});

