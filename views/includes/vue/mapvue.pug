script(type="text/javascript").
	Vue.prototype.moment = moment;
	Vue.prototype.$ = $;
	Vue.prototype.window = window;
	Vue.prototype.L = L;
	if (typeof tinymce === 'object') Vue.prototype.tinymce = tinymce;
	new Vue({
		el: '#vue',
		data: function data(){
			return {
				initbounds: null,
				tempstyles: [],
				colorTimeout: null,
				buf: [],
				availablelayers: this.ifNullThenArr(!{JSON.stringify(availablelayers)}),
				c: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928","#1f77b4","#ff7f0e","#2ca02c","#d62728","#9467bd","#8c564b","#e377c2","#7f7f7f","#bcbd22","#17becf"],
				wWidth: window.innerWidth,
				wHeight: window.innerHeight,
				btn: { x: (window.innerWidth / 2), 
					y: (window.innerHeight/ 2),
					r: 21,
					vis: (!this.mapActive || !this.mapEdit ? null : 'block')
				},
				avail: this.parseBool(!{JSON.stringify(avail)}),
				type: this.parseObj(!{JSON.stringify(type)}),
				menu: this.parseObj(!{JSON.stringify(menu)}),
				dat: this.parseObj(!{JSON.stringify(dat)}),
				doc: this.parseObj(!{JSON.stringify(doc)}),
				layers: this.parseObj(!{JSON.stringify(layers)}),
				position: (!this.parseObj(!{JSON.stringify(session.position)}) ? {lat: 40, lng: -111.89, zoom: 6}/*null*/ : this.parseObj(!{JSON.stringify(session.position)})),
				chindex: 0,
				did: (this.parseObj(!{JSON.stringify(doc)}) === '' ? null : this.parseObj(!{JSON.stringify(doc)})._id),
				cursor: null,
				map: '',
				mapActive: (this.parseBool(!{JSON.stringify(mapActive)})),
				mapReady: false,
				mapEdit: false,
				mapEditable: false,
				dataLayer: '',
				lMarker: '',
				thickness: 45,
				res: this.isResponsive(),
				dPath: this.dPathAttr(),
				web: true,
				export: this.parseBool(!{JSON.stringify(exports)}),
				modal: {msg:null},
				dragind: null,
				latlngs: null,
				str: this.parseObj(!{JSON.stringify(str)}),
				lyr: {},
				geo: [],
				latlng: {lat: 40, lng: -111.8},
				credit: this.getCredit(),
				base: 0,
				baseMaps: [
					{
						url: 'https://api.mapbox.com/styles/v1/tbushman/ciq7gm0ov008kbfm580v9mm9c/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoidGJ1c2htYW4iLCJhIjoiSmI0aU94OCJ9.SZytljBzoWupPUYeu_OR9A',
						attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>'
					},
					{
						url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
						attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
					}
					
				],
				zfactor: (0.01 * (!this.map ? 6 : (18 - this.map.getZoom() ) )),
				cZF: null,
				viewerList: false,
				json: {},
				mapCtrl: false
				
			}
		},
		mounted: function(){
			$(document).ready(function(){
				document.addEventListener('keydown', function(event) {
					var keyName = event.key;
					if (keyName === 'Enter') event.preventDefault()
				});
				setTimeout(function(){
					$('.submenu.drop').slideUp(100);
					$('.slidedown').slideUp(100);
				},3000)

			})
			var self = this;
			$(document).on('click', '.href', function(e){
				e.stopPropagation();
			});
			//- const tempstyles = (!self.doc || self.doc.properties.layers.length === 0 ? [] : self.doc.properties.layers)
			//- self.tempstyles = JSON.parse(JSON.stringify(tempstyles));
			window.addEventListener('resize', self.resizeFrame);

			self.loadMap(function(dataCoords){
				/* TODO DRY this out: */
				//- console.log(self.map.getPixelOrigin())
				//- console.log(self.map.project(dataCoords), dataCoords);
				//- console.log(self.lMarker.getLatLng());
				//- console.log(self.map.latLngToLayerPoint(self.lMarker.getLatLng()))
				self.map.on('dragstart', function(){
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					self.viewerList = false;
				});
				self.map.on('movestart', function(){
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					self.viewerList = false;
				})
				self.map.on('zoomstart', function(){
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					self.viewerList = false;
				})
				
				self.map.on('moveend', function(e){
					self.wWidth = window.innerWidth;
					self.wHeight = window.innerHeight;
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					if (self.geo.length > 0) {
						self.viewerList = true;
					}
				})
				self.map.on('dragend', function(e) {
					self.wWidth = window.innerWidth;
					self.wHeight = window.innerHeight;
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					console.log(xy, self.map.layerPointToLatLng)
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					if (self.geo.length > 0) {
						self.viewerList = true;
					}

				})
				self.map.on('zoomend', function(e) {
					self.wWidth = window.innerWidth;
					self.wHeight = window.innerHeight;
					var coord = self.lMarker.getLatLng();
					var xy = self.map.latLngToContainerPoint(coord);
					var x = xy.x;
					var y = xy.y;
					self.dPath = self.dPathAttr()
					self.setBtn(x, y);
					if (self.geo.length > 0) {
						self.viewerList = true;
					}
				
				})

			})
		},
		beforeDestroy: function(){
			//TODO clearTimout
			var self = this;
			if (self.colorTimeout) clearTimeout(self.colorTimeout);
			window.removeEventListener('resize', self.resizeFrame)

		},
		methods: Object.assign(
			{},
			baseFunctions,
			mapFunctions
		)
	});

