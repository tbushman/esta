doctype strict
html
	head
		meta(charset="utf-8")
		meta(http-equiv="X-UA-Compatible", content="IE=edge; charset=utf-8")
		meta(name="google-site-verification", content="p4ANTDMaoAMsiWW5CwWtiY9v8mEPGv8KhQetzWrJlwc")
		title= appTitle
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		//link(rel="stylesheet", href="/stylesheets/simplemde.min.css")
		link(rel="stylesheet", href="/stylesheets/style.css")
		link(rel="stylesheet", href="/stylesheets/leaflet.css")
		link(rel="stylesheet", href="/stylesheets/leaflet.draw.css")

		//
			style(id="style", type="text/css")
				include ../public/stylesheets/styleword.css
			script(type="text/javascript", v-on:load="onGapiLoad()", src="https://apis.google.com/js/api.js")
		script(type="text/javascript", src="/scripts/vue.min.js")
		script(type="text/javascript", src="/scripts/jquery.min.js")
		script(type="text/javascript", src="/scripts/jquery-ui.min.js")
		script(type="text/javascript", src="/scripts/moment-with-locales.min.js")
		script(type="text/javascript", src="/scripts/marked.min.js")
		//script(type="text/javascript", src="/scripts/simplemde.min.js")
		script(type="text/javascript", src="https://cloud.tinymce.com/stable/tinymce.min.js?apiKey=yb2pwtctf7qznwdoo61w3kyj127j61gch5uhhzneop9mfkg7")
		script(type="text/javascript", src="/scripts/leaflet.js")
		//script(type="text/javascript", src="/scripts/leaflet.draw.js")
		//script(type="text/javascript", src="/scripts/Leaflet.draw.drag-src.js")
		//script(defer src="https://use.fontawesome.com/releases/v5.2.0/js/all.js", integrity="sha384-4oV5EgaV02iISL2ban6c/RmotsABqE4yZxZLcYMAdG7FAPsyHYAPpywE9PJo+Khy", crossorigin="anonymous")
		script(type="text/javascript", src="/scripts/Path.Drag.js")
		script(type="text/javascript", src="/scripts/Leaflet.Editable.js")
		//script(type="text/javascript", src="https://cdnjs.cloudflare.com/ajax/libs/mocha/3.0.2/mocha.min.js")
		script(type='text/javascript', src='/scripts/leaflet-image_0_4_0.js')
		script(type="text/javascript", src="/scripts/jszip.min.js")
		//script(type='text/javascript', src='/scripts/html-docx.js')
	body
		block page
		block header
		block content
		div#gpresult

		#map

		script(type="text/javascript").
			
			new Vue({
				el: '#vue',
				data: function data(){
					return {
						menu: this.parseObj(!{JSON.stringify(menu)}),
						dat: this.parseObj(!{JSON.stringify(dat)}),
						data: '',//this.parseObj(!{JSON.stringify(data)}),
						doc: this.parseObj(!{JSON.stringify(doc)}),
						position: this.parseObj(!{JSON.stringify(session.position)}),
						edit: (this.parseObj(!{JSON.stringify(doc)}) === '' ? null : this.parseObj(!{JSON.stringify(doc)}).index),
						chindexes: [],
						chindex: 0,
						dindexes: [],
						dindex: (this.parseObj(!{JSON.stringify(doc)}) === '' ? 0 : this.parseObj(!{JSON.stringify(doc)}).index),
						cursor: null,
						input: '',
						fixedPug: '',
						map: '',
						dataLayer: '',
						lMarker: '',
						thickness: 45,
						wWidth: window.innerWidth,
						wHeight: window.innerHeight,
						dPath: this.dPathAttr(),
						tinymce: null,
						str: this.parseObj(!{JSON.stringify(str)}),
						diff: /*{
							index: (this.parseObj(!{JSON.stringify(doc)}) !== '' ? this.parseObj(!{JSON.stringify(doc)}).index : 0),
							ind: 0
						}*/null,
						web: true,
						export: this.parseBool(!{JSON.stringify(exports)}),
						ff: this.parseObj(!{JSON.stringify(ff)}),//['General Provisions.', 'Concept Plan.', 'Sketch Plan.', 'Preliminary Subdivision Applications.', 'Final Subdivision Applications.', 'Vacating or Amending a Recorded Final Subdivision Plat, Street or Alley Final.', 'Subdivision Ordinance Amendments.', 'Noticing Requirements.', 'Appeals.', 'Special Excepetions.', 'Design and Construction Standards.', 'Guarantees for Subdivision Improvements, Facilities, and Amenities.', 'Definitions.'],
						accordions: (this.parseObj(!{JSON.stringify(dat)}) !== '' && this.parseBool(!{JSON.stringify(exports)}) ? this.parseObj(!{JSON.stringify(dat)}).map(function(data){return data.map(function(doc){return doc.index})}) : 
							(
								this.parseObj(!{JSON.stringify(dat)}) !== '' ?
								[
									this.parseObj(!{JSON.stringify(dat)}).map(function(data){return []})
								] :
								[[]]
							)
						),
						uploadisreplace: false,
						uploadchtitle: null,
						dragind: null,
						latlngs: null,
						gp: (this.parseObj(#{session.importgdrive}) !== '' ? this.parseObj(!{JSON.stringify(gp)}) : null),
						sliderIndex: 1
					}
				},
				updated: function(){
					if (this.dindexes.length === 0) {
						var self = this;
						self.dindexes = (self.data && self.data !== '' ? self.data.map(function(doc){
							return doc.index;
						}) : [(!self.doc || self.doc === '' ? 0 : self.doc.index)] );
						self.dindexes.sort();
					}
				},
				mounted: function(){
					$(document).ready(function(){
						document.addEventListener('keydown', function(event) {
						  var keyName = event.key;
							if (keyName === 'Enter') event.preventDefault()
						  //alert('keypress event\n\n' + 'key: ' + keyName);
						});
					})
					var self = this;
					$(document).on('click', '.href', function(e){
						e.stopPropagation();
					});
					self.dindexes = (self.data && self.data !== '' ? self.data.map(function(doc){
						return doc.index;
					}) : [(!self.doc || self.doc === '' ? 0 : self.doc.index)] );
					self.dindexes.sort();
					$('.drop').slideToggle(100);
					$('.slidedown').slideToggle(100);
					$('.mainmenu').on('click', function(){
						if ($('.dropdown').hasClass('active')) {
							$('.dropdown').removeClass('active');
						} else {
							$('.dropdown').addClass('active');
						}
						$('.drop').slideToggle(100);
					});
					$('.submenu.drop').on('click', function(){
						if (!$(this).next('.slidedown')) {
							
							return;
						} else {
							
							$('.submenu.drop').not($(this)).removeClass('active');
							$(this).next('.slidedown').slideToggle(100);
							$(this).toggleClass('active');
							if (!$('.submenu.drop').not($(this)).next('.slidedown a').attr('href')) {
								$('.submenu.drop').not($(this)).next('.slidedown').slideUp(100);
							} else {
								
								$(this).parent('.slidedown').slideUp(100);
								if (!$(this).attr('href')) {
									$(this).children('.ui').children('i').toggleClass('fa-angle-right');
									$(this).children('.ui').children('i').toggleClass('fa-angle-down');
								} else {
									$('.dropdown').not($('.static')).slideUp(100);
								}
								//
							}
						}
					});
					if (self.gp && self.gp !== '') {
						/*var document = window.document;
						#{$ScriptJS}('https://apis.google.com/js/api.js', function(){
							self.onGapiLoad()
						});*/
						let script = document.createElement('script')
						script.setAttribute('src', 'https://apis.google.com/js/api.js')
						script.async = true
						script.onload = () => {
							self.onGapiLoad()
						}
						document.head.appendChild(script)
					}
					if (self.export && self.export !== '') {
						setTimeout(function(){
							var fd = new FormData();
							var innerhtmldiv = $('div.centerallwrap')[0];
							if (!innerhtmldiv) return;
							//https://stackoverflow.com/a/12523515/3530394
							var getDocTypeAsString = function () { 
							var node = document.doctype;
							return node ? "<!DOCTYPE "
							+ node.name
							+ (node.publicId ? ' PUBLIC "' + node.publicId + '"' : '')
							+ (!node.publicId && node.systemId ? ' SYSTEM' : '') 
							+ (node.systemId ? ' "' + node.systemId + '"' : '')
							+ '>\n' : '';
							};

							
							var innerhtml = 
							getDocTypeAsString() + 
							'<html><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge; charset=utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1.0"/>' + 
							'<style>'+
							$('#style').html() +
							/*'<!--[if supportFields]>'+
							"<span style='mso-element:field-begin'></span>"+
							"<span style='mso-spacerun:yes'> </span>"+
							'TOC \o "1-1" \h \z \\u \t "Title 7;1"'+
							"<span style='mso-element:field-separator'></span>"+
							"<span style='mso-no-proof:yes'>"+
							"Table of content - Please select all using CTRL+T and press F9 to update all fields."+
							"</span><span style='mso-element:field-end'></span><![endif]-->"+*/
							'</style></head><body>'+
							//'<link rel="stylesheet" href="/stylesheets/style.css"/></head><body>' + 
							//'<link rel="stylesheet" type="text/css" href="'+ ( '#{appURL}' === 'ta.bli.sh' ? 'https://' : 'http://' ) +''+ '#{appURL}' +'/stylesheets/styleword.css"/>'+
							innerhtmldiv.outerHTML + '</body></html>';//$('html')[0].outerHtml.toString();
							console.log(innerhtml)
							fd.append("pdf", innerhtml);
							
							var uploadurl = '/api/exportpdf';
							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
								success: function(res) { 
									console.log(res)
								}
								
							})
						}, 5000)
						
					}
					if (self.dat) {
						self.dat.sort(function(a,b){
							return a[0].chapter.ind > b[0].chapter.ind
						})
						//self.dat = self.dat.reverse()
					}
					console.log(self.dat)
					if (!self.data || self.data === '') {
						//self.dat.forEach(function(data))
						if (self.dat[0] && self.dat[0][0].chapter.ind === self.dat[self.dat.length - 1][0].chapter.ind) {
							self.data = self.dat[0]
						} else {
							if (self.dat[0]) {
								self.data = [].concat.apply([], self.dat);
							}
						}
						if (!self.doc || self.doc === '') {
							
						} else {
							
							self.edit = self.doc.index;
							self.dindexes = [self.edit];
							self.dindex = 0;
						}
					}

					if (!self.tinymce && $('#description')[0] && tinymce) {
						console.log('shouldn\'t be')
						console.log($('#description')[0])
						self.tinymce = tinymce.init({
							menubar: false,
							statusbar: false,
							theme: 'inlite',
							inline: true,
							selector: "#description",
							plugins: 'table',
							plugins: 'lists',
							selection_toolbar: 'bold italic underline strikethrough | bullist numlist | outdent indent blockquote | subscript superscript | link unlink | table ',
							//selectiion_toolbar: 'undo redo | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify alignnone | outdent indent blockquote | subscript superscript | bullist numlist | link unlink | table',
							table_toolbar: "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"

						});

					}
					
					self.loadMap(function(dataCoords){
						/*if (!map) return;
						self.map = map;
						self.dataLayer = dataLayer;*/
						if (!dataCoords) return;
						var point = self.map.latLngToLayerPoint(new L.LatLng(dataCoords[1], dataCoords[0]))
						var bounds = self.dataLayer.getBounds();
						self.map.fitBounds(bounds);

						self.panZoom();
						
					})
					
					self.sliderImg()
				},
				beforeDestroy: function(){
					
				},
				methods: {
					sliderImg: function(){
						var self = this;
						setInterval(function(){
							$('#slider').css('opacity',0);
							setTimeout(function(){
								if (self.sliderIndex > 3) {
									self.sliderIndex = 1
								} else {
									self.sliderIndex += 1;
								}
								setTimeout(function(){
									$('#slider').css('opacity',1);
								},2000)
								
							},2000)
						},10000)
					},
					clickSlider: function(diff, doc){
						//`<a v-bind:click="" >${diff.user.username}<img class="avatar" src="${diff.user.avatar}"></img></a>`
						$('#diff'+doc.index).val(diff.index)
					},
					onGapiLoad: function() {
						var self = this;
						console.log(gapi)
						self.initPicker(self.gp.access_token)
					},
					
					insertFile: function(fileData, callback) {
						var self = this;
						var boundary = '-------314159265358979323846';
						var delimiter = "\r\n--" + boundary + "\r\n";
						var close_delim = "\r\n--" + boundary + "--";

					  var reader = new FileReader();
					  reader.readAsBinaryString(fileData);
					  reader.onload = function(e) {
							var contentType = 
								//'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
								fileData.type || 'application/octet-stream';
							var metadata = {
							  'name': fileData.fileName,
							  'mimeType': contentType,
								'Content-Type': contentType,
								'Content-Length': fileData.size
							};
							var base64Data = btoa(reader.result);
							var multipartRequestBody =
									delimiter +
									'Content-Type: application/json\r\n\r\n' +
									JSON.stringify(metadata) +
									delimiter +
									'Content-Type: ' + 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'+ '\r\n' +
									'Content-Transfer-Encoding: base64\r\n' +
									'\r\n' +
									base64Data +
									close_delim;

							var request = gapi.client.request({
									'path': '/upload/drive/v3/files',
									'method': 'POST',
									'params': {'uploadType': 'multipart'},
									'headers': {
										//'X-Upload-Content-Type' : fileData.type,
										//'Content-Type': 'application/json; charset=UTF-8',
										'Authorization': 'Bearer ' + self.gp.picker_token,
										'Content-Type': 'multipart/mixed; boundary="' + boundary + '"'
									},
									'body': multipartRequestBody});
							if (!callback) {
							  callback = function(file) {
									console.log(file)
							  };
							}
							request.execute(callback);
					  }
					},
					handleGapiClient: function(file){
						var self = this;
						//gapi.client.setApiKey(self.gp.google_key);
						/*gapi.client.load('drive', 'v3', function(){
							self.initPicker(self.gp.access_token)
						})
						*/
						console.log('client loaded')
						gapi.client.load('drive', 'v3', function(){
							var drive = gapi.client.drive;
							var request = drive.files.get({
								fileId: file.id,
								fields: 'webContentLink'
							})
							request.then(function(response){
								console.log(response)
								var webContentLink = response.result.webContentLink.split('&')[0]
								$.get(webContentLink, function(err, result){
									console.log(err, result)
								})
								/*self.insertFile(response.result.webContentLink, function(err, fl){
									if (err) {
										console.log(err)
									}
									var fileId = fl.id;
									drive.files.export({
										fileId, mimeType: 'text/plain'
									}).then( function(result){
										if (err){
											console.log(err)
										}
										console.log(result)
										self.uploadTxt(result)
									}).catch(function(err){
										if (err) {
											console.log(err)
										}
									})
								})*/
							}).catch(function(err){
								if (err) {
									console.log(err)
								}
							})
							
							/*console.log(drive)//({version: 'v3'});
							*/
							
						});
						
						

					},
					initPicker: function(authresult) {
						var self = this;
						
								gapi.load('picker', {
									callback: function() {
										self.createPicker(authresult);
									},
									onerror: function() {
										alert('gapi.client failed to load!');
									},
									timeout: 5000, // 5 seconds.
									ontimeout: function() {
										alert('gapi.client could not load in a timely manner!');
									}
								});

					},
					// Create and render a Picker object for picking user Photos.
					createPicker: function(authresult) {
						console.log(authresult)
						var self = this;
						if (self.gp && self.gp.access_token) {
							var picker = new google.picker.PickerBuilder().
								addView(google.picker.ViewId.DOCUMENTS).
								setOAuthToken(authresult).
								setDeveloperKey(self.gp.picker_key).
								setCallback(self.pickerCallback).
								build();
							picker.setVisible(true);
						}
					},
					// A simple callback implementation.
					pickerCallback: function (data) {
						var self = this;
						google.picker.Response.ACTION
						var url = 'nothing';
						if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
							var doc = data[google.picker.Response.DOCUMENTS][0];
							url = doc[google.picker.Document.URL];
							self.initGdocFileUploader(doc, 'doc');
							//self.initGdriveRevisionGetter(doc);
						}
					},
					initGdriveRevisionGetter: function(file){
						var self = this;
						console.log(file)
						$.post('/api/importgdriverev/'+file.id, function(err, doc){
							
							window.location.href = '/'
						})
						

						
					},
					initGdocFileUploader: function(file, type){
						var self = this;
						
						$.post('/api/importgdoc/'+file.id, function(err, doc){
							
							window.location.href = '/'
						})
					},
					exportPDF: function(e) {
						$(e.target).hide();
						$('.menu').hide();
						$('.danger').hide();
						$.post('/api/exportpdf')
					},
					changeDiff: function(doc, newclick) {
						var self = this;
						var input = document.getElementById('diff'+doc.index);
						if (!input) {
							self.diff = 
							(
								!doc || !doc.properties.diffs || doc.properties.diffs.length === 0 ?
								{
									index: doc.index,
									ind: null
								}
								:
								{
									index: doc.index,
									ind: doc.properties.diffs.length - 1
								}
							) 
						} else {
							var inputval = parseInt(input.value, 10);
							//inputval = (!doc.properties.diffs[inputval] ? 0 : inputval)
							
							self.diff = (
								newclick ? 
								(
									!doc.properties.diffs || doc.properties.diffs.length === 0 ?
									{
										index: doc.index,
										ind: 0
									}
									:
									{
										index: doc.index,
										ind: doc.properties.diffs.length - 1
									}
								) 
								:
								( !doc.properties.diffs[inputval] 
									? 
									null 
									:
									{
										index: doc.index,
										ind: inputval
									}
								)
								
							)
						}
						
						
					},
					dragEnd: function(event, layer) {
						var marker = event.target;
						var position = event.target.getLatLng();
						var lat = position.lat;
						var lng = position.lng;
						self.lMarker.setLatLng(new L.LatLng(position.lat, position.lng),{draggable:'true'});
						self.map.panTo(new L.LatLng(position.lat, position.lng))
						self.position.lng = lng;
						self.position.lat = lat;
						//self.doc.geometry.coordinates = [lng, lat];
						//console.log(self.doc.geometry.coordinates)
						if (self.dragind) {
							console.log(self.doc.geometry.coordinates[0][self.dragind])
							//console.log(self.dataLayer.getLatLngs())
							self.doc.geometry.coordinates[0][self.dragind] = [lng,lat];
							/*self.dataLayer.onEachFeature = function(feature, layer) {
								layer.setLatLngs(self.doc.geometry.coordinates[0])
							}*/
						}

					},
					featureImg: function(ind){
						var self = this;
						var index = parseInt(ind, 10);
						console.log(self.doc.properties.media[index].featured)
						self.doc.properties.media[index].featured = !self.doc.properties.media[index].featured;
					},
					checkChapterName: function() {
						var self = this;
						$.post('/checkchaptername/'+$('#chaptername').val()+'', function(res){
							if (!res) {
								self.uploadisreplace = false;
							} else {
								$('#info').html('<p class="danger">You will be replacing an existing chapter.</p>')
								self.uploadisreplace = true;
								self.uploadchtitle = res;
							}
							$('#importarea').show();
						})
					},
					navigateTo: function(url){
						window.location.href = url;
					},
					deleteEntry: function(doc) {
						$.post('/api/deleteentry/'+doc._id+'/'+doc.index+'', function(res){
							window.location.href = '/menu/'+doc.title.ind+'/'+doc.chapter.ind+'';
						})
					},
					deleteMedia: function(ind) {
						var self = this;
						$.post('/api/deletemedia/'+self.doc._id+'/'+ind+'', function(res){
							self.doc = res;
						})
					},
					accordion: function(n, ind) {
						var self = this;
						var input = document.getElementById('diff'+ind);
						//console.log(self.accordions[n])
						//console.log(self.dat[n][ind].index)
						/*if (self.dat[n][ind] !== undefined) {
							self.changeDiff(self.dat[n][ind], true)
						}*/
						
						if (self.accordions[n].indexOf(ind) === -1) {
							self.accordions[n].push(ind);
							self.accordions[n].sort();
							/*self.accordions[n].forEach(function(a){
								if (a.index === ind && document.getElementById('diff'+a.index)) {
									
								} else {
									document.getElementById('diff'+a.index).value = null
								}
							})*/
						} else {
							self.accordions[n].splice(self.accordions[n].indexOf(ind), 1);
							//input.value = null;
							//self.changeDiff(self.dat[n][ind], false)
						}
					},
					parseBool: function(item) {
						if (!item) return false;
						return true;
					},
					toggleExport: function() {
						this.export = !this.export;
					},
					getHTML: function(type, str) {
						var self = this;
						var span = document.createElement(type);
						span.innerHTML = str;
						return span.outerHTML;
					},
					computeDiffStr: function(diffs) {
						diffs.forEach(function(diff) {
							return diff
						})
					},
					getDiffHtml: function() {
						var self = this;
						sendDiff(function(diffs){
							return ('<test></test>')
						})
					},
					sendDiff: function(cb) {
						var self = this;
						var fd = new FormData();
						var innerhtmldiv = $('div.centerallwrap')[0];
						if (!innerhtmldiv) return;
						var innerhtml = $(innerhtmldiv).html().toString();
						fd.append("str", innerhtml);
						
						var uploadurl = '/diff';
						$.ajax({
							url: uploadurl,
							type: 'POST',
							data: fd,
							processData: false,
							contentType: false,
							success: function(diff) { 
								cb(diff)
								console.log(self.diff)
							}
							
						})
					},
					dPathAttr: function() {
						var self = this;
						var thickness = (!thickness ? 45 : thickness);
						var nw = (!self.wWidth ? window.innerWidth : self.wWidth);
						var nh = (!self.wHeight ? window.innerHeight : self.wHeight);
						
						var d = "M0,0v"+nh+"h"+nw+"V0H0L0,0z "+
						"M"+(thickness)+","+(thickness)+"H"+(nw - thickness)+"V"+(nh - thickness)+"H"+(thickness)+"V"+(thickness)+"z "
						return d;
					},
					widthRectAttr: function(plus,type){
						var nw = this.getSize(type).nw;
						return nw - ((self.thickness + plus) * 2);
					},
					heightRectAttr: function(plus,type){
						var nh = this.getSize(type).nh;
						return nh - ((self.thickness + plus) * 2);
					},
					panZoom: function(){
						var self = this;
						$.post('/panzoom/'+self.map.getCenter().lat+'/'+self.map.getCenter().lng+'/'+self.map.getZoom()+'', function(result){
						})
					},
					uploadDocx: function(evt) {
						var self = this;

						var file = evt.target.files[0]
						
						JSZip.loadAsync(file)
						.then(function(zip) {
							zip.generateAsync({type: 'Blob'})
							.then(function(blob){
								var fd = new FormData();
								fd.append("docx", blob);
								var uploadurl = '/api/importdocx/docx';
								$.ajax({
									url: uploadurl,
									type: 'POST',
									data: fd,
									processData: false,
									contentType: false,
									success: function(response) { 
										window.location.href = '/'
									}
									
								})
							})
						})
					},
					uploadTxt: function(file) {
						console.log(file)
						var reader = new FileReader();
						var self = this;
						reader.onloadend = function(e) {
							var fd = new FormData();

							fd.append("txt", file);
							var chtitle = encodeURIComponent($('#chaptername').val());
							var uploadurl = '/api/importtxt/txt/'+(self.uploadchtitle ? self.uploadchtitle : chtitle )+'/'+self.uploadisreplace+'';
							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
								success: function(response) { 
									window.location.href = '/'
								}
								
							})
						}
						reader.readAsDataURL(file)

					},
					importTxt: function(e){
						var self = this;
						var file = document.getElementById('importtxt').files[0];//e.target.files[0];
						self.uploadTxt(file);
					},
					importCsv: function(e){

						var self = this;
						var file = document.getElementById('importcsv').files[0];//e.target.files[0];
						var reader = new FileReader();
						
						reader.onloadend = function(e) {
							var fd = new FormData();

							fd.append("csv", file);
							
							var uploadurl = '/api/importcsv/'+(!self.doc || self.doc === '' ? self.data[self.dindex]._id : self.doc._id )+'/csv';
							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
								success: function(response) { 
									self.doc = response;
									/*var bounds = self.dataLayer.getBounds();
									self.map.fitBounds(bounds);*/
									window.location.reload(true)
								}
								
							})
						}
						reader.readAsDataURL(file)
						
					},
					submitForm: function(ind){
						$('#form_'+ind+'').submit()
					},
					parseObj: function(obj) {
						if (!obj) return '';
						return obj;
					},
					toggleEdit: function(ind) {
						var self = this;
						this.edit = (!this.edit ? ind : null);
						
						
						
					},
					addMapBlob: function() {
						var self = this;
						var ind = self.doc.properties.media.length;
						$('div.centerallwrap').css('pointer-events', 'auto')
						self.dataLayer.disableEdit();
						self.addNewMedia(self.doc._id, ind, function(){
							//var canvas = document.querySelector('canvas.leaflet-zoom-animated');
							leafletImage(self.map, function(err, canvas){
								if (err) {
									return console.log(err)
								}
								console.log(canvas)
								setTimeout(function(){
									var img = document.querySelector('img#return'+ind+'');
									self.uploadBlob(img, canvas, ind, function(){

									})
								},2000)
							})
							
							
							
						});
						
					},
					addNewMedia: function(id, index, cb) {
						var self = this;
						$.post('/api/newmedia/'+id+'/'+index+'', function(res) {
							self.doc.properties.media.push(res);
							cb()
						})
					},
					handleFile: function(dindex, index) {
						var self = this;
						self.dindex = dindex;
						self.file = document.getElementById('media_'+index).files[0];
						self.processImage(index);
					},
					processImage: function(imgindex) {
						var self = this;
						var dataurl = null;
						var file = self.file;
						if (!file) return;
						var imagefile = file.type;
						var imageTypes= ["image/jpeg","image/png","image/jpg","image/svg+xml"];
						if(imageTypes.indexOf(imagefile) === -1) {
							$("#info").html("<span class='msg-error'>Please Select A valid Image File</span><br /><span>Only jpeg, jpg, png, and pdf types allowed</span>");
							return false;
							
						} else {
							var reader = new FileReader();
							
							reader.onloadend = function(e) {
								var img = document.getElementById('return'+imgindex+'');
								img.src = e.target.result;
								var type = imagefile.split('image/')[1];
								img.onload = function() {
									$('#media').val('');
									var can = $('#canvas'+imgindex+'')[0];
									var maxWidth = 1025 ;
									var maxHeight = 1025 ;
									var w = img.width;
									var h = img.height;
									can.width = w;
									can.height = h;
									var ctx = can.getContext("2d");
									ctx.drawImage(img, 0, 0);
									self.checkImage(img, can, w, h, maxWidth, maxHeight, imgindex, type);
								}
								
							}
							reader.readAsDataURL(file);
						}
					},
					checkImage: function(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype) {
						var self = this;
						if (h > maxHeight || w > maxWidth) {
							self.reSize(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype)
						} else {
							if (maxHeight === 400) {
								self.drawThumb(img, can, w, h, imgindex, imgtype)
							} else {
								self.drawFull(img, can, w, h, imgindex, imgtype)
							}
						}
						
					},
					reSize: function(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype){
						can.height = h*0.99;
						can.width = w*0.99;

						var can2 = document.createElement('canvas');
						can2.width = w*0.99;
						can2.height = h*0.99;
						var ctx2 = can2.getContext('2d');
						var ctx = can.getContext('2d');
						ctx2.drawImage(img, 0, 0, w*0.99, h*0.99);
						ctx.drawImage(can2, 0, 0, w*0.99, h*0.99, 0, 0, w*0.99, h*0.99);
						w = w*0.99;
						h = h*0.99;
						img.width = w;
						img.height = h;
						this.checkImage(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype)
					},
					uploadBlob: function(img, can, imgindex, cb) {
						var self = this;
						var orientation = 'portrait'
						if (can.width > can.height) { 
							orientation = 'landscape' 
						} else { 
							orientation = 'portrait' 
						}

						if (!HTMLCanvasElement.prototype.toBlob) {
						 Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
							value: function (callback, type, quality) {
								var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
								len = binStr.length,
								arr = new Uint8Array(len);
								for (var i = 0; i < len; i++ ) {
									arr[i] = binStr.charCodeAt(i);
								}
								callback( new Blob( [arr], {type: type || 'image/png'} ) );
							}
						 });
						}
						can.toBlob(function(blob) {
							var fd = new FormData();
							fd.append("img", blob);
							var uploadurl = '/api/uploadmedia/'+self.doc.index+'/'+imgindex+'/png';
							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
									success: function(response) { 
									img.onload = function () {
										self.doc.properties.media[imgindex].image_abs = response;
										self.doc.properties.media[imgindex].image = response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', '');
										self.doc.properties.media[imgindex].thumb_abs = response;
										self.doc.properties.media[imgindex].thumb = response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', '');
										self.doc.properties.media[imgindex].orientation = orientation;
										cb();
									}
									img.src = response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', '');
								}
							})
						}, 'image/png');
					},
					drawFull: function(img, can, w, h, imgindex, imgtype) {
						var self = this;
						can.height = h;
						can.width = w;
						var ctx = can.getContext('2d');
						console.log(w,h)
						ctx.drawImage(img, 0, 0, w, h);
						self.uploadBlob(img, can, imgindex, function(){
							var can = $('#canvas'+imgindex+'')[0];
							var maxWidth = 400 ;
							var maxHeight = 400 ;
							var w = img.width;
							var h = img.height;

							self.checkImage(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype);
						})
						
					},
					drawThumb: function(img, can, w, h, imgindex, imgtype) {
						var self = this;
						can.height = h;
						can.width = w;
						var ctx = can.getContext('2d');
						
						ctx.drawImage(img, 0, 0, w, h);
						var dataurl = can.toDataURL("image/png", 0.8);
						setTimeout(function(){
							self.doc.properties.media[imgindex].thumb = dataurl.replace(/data:image\/png;base64,/, '');
							//$('#inputthumb'+imgindex+'').val(dataurl.replace(/data:image\/png;base64,/, ''));
							
						}, 100);
					},
					loadMap: function(cb) {
						var self = this;
						var dataLayer;
						var dataCoords;
						var map = new L.map('map', { 
							center: [
								(!self.position ? 41.509859 : self.position.lat),
								(!self.position ? -112.015802 : self.position.lng)
							], 
							zoom: (!self.position ? 6 : self.position.zoom),
							zoomControl: false,
							minZoom: 2,
							maxZoom: 18,
							editable: true,
							renderer: L.canvas(),
							preferCanvas: true
						});
						if (self.infowindow === 'tooltip') {
							L.control.zoom({
								position:'bottomleft'
							}).addTo(map);
						} else {
							L.control.zoom({
								position:'topleft'
							}).addTo(map);
						}
						
						var options3 = {
							
							attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
						};
						//https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png
						//L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', options3).addTo(map);
						//var canvas = L.tileLayer.canvas();
						//canvas.drawTile = function(can, )
						L.tileLayer('https://api.mapbox.com/styles/v1/tbushman/ciq7gm0ov008kbfm580v9mm9c/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoidGJ1c2htYW4iLCJhIjoiSmI0aU94OCJ9.SZytljBzoWupPUYeu_OR9A', {renderer: L.canvas({padding:0.5}), bounds: map.getBounds().pad(1000)}).addTo(map);
						//var tileCanvas = L.tileLayer.canvas('https://api.mapbox.com/styles/v1/tbushman/ciq7gm0ov008kbfm580v9mm9c/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoidGJ1c2htYW4iLCJhIjoiSmI0aU94OCJ9.SZytljBzoWupPUYeu_OR9A', {renderer: L.canvas({padding:0.5}), bounds: map.getBounds().pad(100)}).addTo(map); //slc transit
						//tileCanvas.drawTile = function()
						//var stamenLayer = new L.StamenTileLayer('terrain');
						//map.addLayer(stamenLayer)
						//L.tileLayer('http://{s}.tiles.mapbox.com/v3/tbushman.iba1gl27/{z}/{x}/{y}.png').addTo(map);
						
						//L.tileLayer('http://tile.thunderforest.com/outdoors/${z}/${x}/${y}.png').addTo(map);
						self.map = map
						if (!self.dataLayer && self.doc) {
							// generate geographic points from data
							if (self.doc && self.doc !== '') {
								var myRenderer = L.canvas({ padding: 0.5 });
								//dataLayer = L.GeoJSON.geometryToLayer(self.doc).addTo(map);
								self.dataLayer = L.GeoJSON.geometryToLayer(self.doc, {
									// MongoDB stores coordinates as [lng, lat]
									// Leaflet uses [lat, lng]
									
									onEachFeature: function (feature, layer) {
										if (feature.geometry.type === 'Point') {
										}
										if (feature.geometry.type === 'Polygon') {
											//layer.setLatLngs(self.doc.geometry.coordinates[0])
											//self.latlngs = layer.getLatLngs()
										}
										
									},
									geometryToLayer: function(feature) {
										if (feature.geometry.type === 'Polygon') {
											//console.log(feature.geometry.type )
											var geojsonPolygonOptions = {
												fillColor: 'var(--highlight)',
												color: '#fff',
												weight: 2,
												opacity: 1,
												fillOpacity: 0.8,
												className: feature._id
												
											};
											var polygon = L.polygon(feature.geometry.coordinates, geojsonPolygonOptions);
											//polygon.enableEdit();
											//polygon.on('dblclick', L.DomEvent.stop).on('dblclick', dataLayer.toggleEdit);
											return polygon;
										}
									},
									pointToLayer: function (feature, latlng) {
										if (feature.geometry.type === 'Point') {
											//console.log(feature)
											var geojsonMarkerOptions = {
												radius: 11,
												fillColor: 'var(--highlight)',
												color: '#fff',
												weight: 2,
												opacity: 1,
												fillOpacity: 0.8,
												className: feature._id+'@'+map.latLngToLayerPoint(latlng).x+','+map.latLngToLayerPoint(latlng).y+''
											};
											var circleMarker = L.circleMarker(latlng, geojsonMarkerOptions);
											return circleMarker;
										}
										
									}
								})//.addTo(map);
								
								//cb(map, dataLayer)
								self.map.addLayer(self.dataLayer);
								/*L.NewPolygonControl = L.Control.extend({

									options: {
											position: 'topleft'
									},

									onAdd: function (map) {
										var container = L.DomUtil.create('div', 'leaflet-control leaflet-bar'),
												link = L.DomUtil.create('a', '', container);

										link.href = '#';
										link.title = 'Create a new polygon';
										link.innerHTML = '▱';
										L.DomEvent.on(link, 'click', L.DomEvent.stop)
														  .on(link, 'click', function () {
																map.editTools.startPolygon();
														  });

										return container;
									}
								});*/
								/** 
									* https://github.com/w8r 
								**/
								/*L.EditControl = L.Control.extend({
									options: {
										position: 'topleft',
										callback: null,
										kind: '',
										html: ''
									},

									onAdd: function (map) {
										var container = L.DomUtil.create('div', 'leaflet-control leaflet-bar'),
											link = L.DomUtil.create('a', '', container);
										link.href = '#';
										link.title = 'Create a new ' + this.options.kind;
										link.innerHTML = this.options.html;
										L.DomEvent.on(link, 'click', L.DomEvent.stop)
										  .on(link, 'click', function () {
												window.LAYER = this.options.callback.call(map.editTools);
										}, this);
										return container;
									}

								});*/
								/*
								L.NewLineControl = L.EditControl.extend({
									options: {
										position: 'topleft',
										callback: map.editTools.startPolyline,
										kind: 'line',
										html: '\\/\\'
									}
								});
								*/
								/*L.NewPolygonControl = L.EditControl.extend({
									options: {
										position: 'topleft',
										callback: map.editTools.startPolygon,
										kind: 'polygon',
										html: '▰'
									}
								})*/
									/*
									onAdd: function(map) {
										var container = L.DomUtil.create('div', 'leaflet-control leaflet-bar'),
										link = L.DomUtil.create('a', '', container);

										link.href = '#';
										link.title = 'Create a new polygon';
										link.innerHTML = '▱';
										L.DomEvent.on(link, 'click', L.DomEvent.stop)
										.on(link, 'click', function () {
												map.editTools.startPolygon();
										});
										
										return container;
									}
								})
								;
								/*
								L.NewMarkerControl = L.EditControl.extend({
									options: {
										position: 'topleft',
										callback: map.editTools.startMarker,
										kind: 'marker',
										html: '🖈'
									}
								});

								L.NewRectangleControl = L.EditControl.extend({
									options: {
										position: 'topleft',
										callback: map.editTools.startRectangle,
										kind: 'rectangle',
										html: '⬛'
									}
								});
								L.NewCircleControl = L.EditControl.extend({
									options: {
										position: 'topleft',
										callback: map.editTools.startCircle,
										kind: 'circle',
										html: '⬤'
									}
								});

								map.addControl(new L.NewMarkerControl());
								map.addControl(new L.NewLineControl());
								*/
								//self.map.addControl(new L.NewPolygonControl());
								/*map.addControl(new L.NewRectangleControl());
								map.addControl(new L.NewCircleControl());*/
								// wip ctrl-z undo
								/*var Z = 90, latlng, redoBuffer = [],
										onKeyDown = function (e) {
										if (e.keyCode == Z) {
												if (!dataLayer.editTools._drawingEditor) return;
												if (e.shiftKey) {
														if (redoBuffer.length) dataLayer.editTools._drawingEditor.push(redoBuffer.pop());
												} else {
														latlng = dataLayer.editTools._drawingEditor.pop();
														if (latlng) redoBuffer.push(latlng);
												}
										}
								}
								L.DomEvent.addListener(document, 'keydown', onKeyDown, map);
								map.on('editable:drawing:end', function () {
										redoBuffer = [];
								});*/
								//console.log(dataLayer.getLatLngs());
								/*var vectors = [...documentQuerySelectorAll('.leaflet-marker-icon')]
								vectors.forEach(function(v){
									v.onclick = function(e){
										
									}
								})*/
								
								/*$(document).on('click', '.leaflet-marker-icon', function(e){
									var latlngs = []
									/*e.target.getLatLngs().forEach(function(latlng){
										
										
									})*/
								/*var deleteShape = function (e) {
									console.log(e.latlng, self.dataLayer.editor)
								  if ((e.originalEvent.ctrlKey || e.originalEvent.metaKey) && self.dataLayer.editEnabled()) {
										self.dataLayer.editor.deleteShapeAt(e.latlng)
										self.dataLayer.toggleEdit
										//map.addLayer(dl)
										self.dataLayer.editor.refresh()
										//dataLayer.setLatLngs([e.latlng,e.latlng,e.latlng,e.latlng]); 
										//dataLayer.redraw(); dataLayer.toggleEdit; /*dataLayer.editor.deleteShapeAt(e.latlng);
									}
								};
								self.dataLayer.on('click', L.DomEvent.stop).on('click', deleteShape, dataLayer);
								self.dataLayer.on('dblclick', L.DomEvent.stop).on('dblclick', self.dataLayer.toggleEdit);*/
								/*map.on('layeradd', function (e) {
									console.log(e.layer instanceof L.GeoJSON)
										if (e.layer instanceof L.polygon) e.layer.on('click', L.DomEvent.stop).on('click', deleteShape, e.layer);
										if (e.layer instanceof L.polygon) e.layer.on('dblclick', L.DomEvent.stop).on('dblclick', e.layer.toggleEdit);
								});*/
								/*map.on('click', function(){
									var latlngs = []
									dataLayer.getLatLngs().forEach(function(latlng){
										latlng.forEach(function(ll){
											console.log(ll.lng)
											latlngs.push([ll.lng,ll.lat])
										})
										latlngs.push([latlng[0].lng, latlng[0].lat])
									})
									self.doc.geometry.coordinates = [latlngs]
								})
								dataLayer.on('click', function(e){
									var latlngs = []
									e.target.getLatLngs().forEach(function(latlng){
										
										latlng.forEach(function(ll){
											console.log(ll.lng)
											latlngs.push([ll.lng,ll.lat])
										})
										latlngs.push([latlng[0].lng, latlng[0].lat])
									})
									self.doc.geometry.coordinates = [latlngs]
								})*/
								self.dataLayer.on('dragend', function(e){
									var latlngs = []
									e.target.getLatLngs().forEach(function(latlng){
										
										latlng.forEach(function(ll){
											console.log(ll)
											latlngs.push([ll.lng,ll.lat])
										})
										latlngs.push([latlng[0].lng, latlng[0].lat])
									})
									self.doc.geometry.coordinates = [latlngs]
								})
								//dataLayer.on('dblclick', L.DomEvent.stop).on('dblclick', dataLayer.toggleEdit);
								if (!Array.isArray(self.doc.geometry.coordinates[0])) {
									dataCoords = self.doc.geometry.coordinates;
								} else {
									dataCoords = self.doc.geometry.coordinates[0][0];

								}
								self.dataLayer.enableEdit();

								self.lMarker = L.marker([dataCoords[1], dataCoords[0]], {draggable: true}).addTo(map);

							}
							/*L.Canvas.include({
									_extendRedrawBounds: function (layer) {
											if (!layer._pxBounds) return;
											var padding = (layer.options.weight || 0) + 1;
											this._redrawBounds = this._redrawBounds || new L.Bounds();
											this._redrawBounds.extend(layer._pxBounds.min.subtract([padding, padding]));
											this._redrawBounds.extend(layer._pxBounds.max.add([padding, padding]));
									}
							});*/
							self.map.panTo(new L.LatLng(dataCoords[1], dataCoords[0]));
							
							cb(dataCoords)

						} else {
							cb(null)
							console.log('when?')
						}
					}
				}
			});
