doctype html
html
	head
		meta(charset="utf-8")
		meta(http-equiv="X-UA-Compatible", content="IE=edge; charset=utf-8")
		title= appTitle
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		link(rel="stylesheet", href="/stylesheets/simplemde.min.css")
		link(rel="stylesheet", href="/stylesheets/style.css")
		link(rel="stylesheet", href="/stylesheets/leaflet.css")

		style(id="style", type="text/css")
		script(type="text/javascript", src="/scripts/vue.min.js")
		script(type="text/javascript", src="/scripts/jquery.min.js")
		script(type="text/javascript", src="/scripts/jquery-ui.min.js")
		script(type="text/javascript", src="/scripts/moment-with-locales.min.js")
		script(type="text/javascript", src="/scripts/marked.min.js")
		//script(type="text/javascript", src="/scripts/simplemde.min.js")
		script(type="text/javascript", src="https://cloud.tinymce.com/stable/tinymce.min.js")
		script(type="text/javascript", src="/scripts/leaflet.js")
		script(type="text/javascript", src="https://cdnjs.cloudflare.com/ajax/libs/mocha/3.0.2/mocha.min.js")
	body
		block page
		block header
		block content
		
		#map
		script(type="text/javascript").
			
			new Vue({
				el: '#vue',
				data: function data(){
					return {
						menu: this.parseObj(!{JSON.stringify(menu)}),
						data: this.parseObj(!{JSON.stringify(data)}),
						doc: this.parseObj(!{JSON.stringify(doc)}),
						position: this.parseObj(!{JSON.stringify(session.position)}),
						edit: null,
						dindexes: [],
						dindex: (this.parseObj(!{JSON.stringify(doc)}) === '' ? 0 : this.parseObj(!{JSON.stringify(doc)}).index),
						cursor: null,
						input: '',
						fixedPug: '',
						map: '',
						dataLayer: '',
						lMarker: '',
						thickness: 45,
						wWidth: window.innerWidth,
						wHeight: window.innerHeight,
						dPath: this.dPathAttr(),
						tinymce: tinymce.init({
							selector: "#layouttext"
						})/*,
						simpleMde: (!document.getElementById("layouttext")[0] ? null : new SimpleMDE({
							element: document.getElementById("layouttext")[0]
						}))*/
						
						
						
					}
				}/*,
				components: {
					'editor': Editor // <- Important part
				}*/,
				mounted: function(){
					var self = this;
					if (self.doc === '') {
						self.doc = self.data[0]
					}
					self.dindexes = self.data.map(function(doc){
						//console.log(doc.properties.media[0].image_abs)
						return doc.index;
					})
					if (self.lMarker && self.lMarker !== '') {
						self.lMarker.on('dragend', function(evend){
							var marker = event.target;
							var position = lMarker.getLatLng();
							self.lMarker.setLatLng(new L.LatLng(position.lat, position.lng),{draggable:'true'});
							self.map.panTo(new L.LatLng(position.lat, position.lng))
							$('input#lat').val(position.lat)
							$('input#lng').val(position.lng)
						})
					}
					self.loadMap(function(map, dataLayer){
						self.map = map;
						self.dataLayer = dataLayer;
						self.panZoom();
					})
				},
				beforeDestroy: function(){
					
				},
				methods: {
					dPathAttr: function() {
						var self = this;
						var thickness = (!thickness ? 45 : thickness);
						var nw = (!self.wWidth ? window.innerWidth : self.wWidth);
						var nh = (!self.wHeight ? window.innerHeight : self.wHeight);
						
						var d = "M0,0v"+nh+"h"+nw+"V0H0L0,0z "+
						"M"+(thickness)+","+(thickness)+"H"+(nw - thickness)+"V"+(nh - thickness)+"H"+(thickness)+"V"+(thickness)+"z "
						return d;
					},
					widthRectAttr: function(plus,type){
						var nw = this.getSize(type).nw;
						console.log(self.thickness, plus, type)
						return nw - ((self.thickness + plus) * 2);
					},
					heightRectAttr: function(plus,type){
						var nh = this.getSize(type).nh;
						//console.log(nh)
						return nh - ((self.thickness + plus) * 2);
					},
					panZoom: function(){
						var self = this;
						$.post('/panzoom/'+self.map.getCenter().lat+'/'+self.map.getCenter().lng+'/'+self.map.getZoom()+'', function(result){
							self.lMarker = L.marker([self.map.getCenter().lat, self.map.getCenter().lng], {draggable: true}).addTo(self.map);
						})
					},
					importCsv: function(e){

						var self = this;
						var file = document.getElementById('importcsv').files[0];//e.target.files[0];
						var reader = new FileReader();
						
						reader.onloadend = function(e) {
							var fd = new FormData();

							fd.append("csv", file);
							
							var uploadurl = '/api/importcsv/'+self.data[self.dindex]._id+'/csv';
							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
								success: function(response) { 
									console.log('success!')
									console.log(response)
								}
								
							})
						}
						reader.readAsDataURL(file)
						
					},
					submitForm: function(ind){
						$('#form_'+ind+'').submit()
					},
					parseObj: function(obj) {
						if (!obj) return '';
						return obj;
					},
					toggleEdit: function(ind) {
						var self = this;
						this.edit = (!this.edit ? ind : null);
						setTimeout(function(){
							/*this.simpleMde = new SimpleMDE({
								element: document.getElementById("layouttext")[0]
							})*/
							self.tinymce = tinymce.init({
								menubar: false,
								statusbar: false,
								selector: "#layouttext",
								plugins: 'table',
								toolbar: 'undo redo | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify alignnone | outdent indent blockquote | subscript superscript | bullist numlist | link unlink | table',
								table_toolbar: "tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol"

							});
							setTimeout(function(){
								$('button.mce-close').click();
							}, 400)
						}, 500)
						
						
					},
					addNewMedia: function(id, index) {

						$.post('/api/newmedia/'+id+'/'+index+'', function(res) {
							console.log(res)
							$('#appendmedia').append(res);
						})
					},
					handleFile: function(dindex, index) {
						var self = this;
						self.dindex = dindex;
						self.file = document.getElementById('media_'+index).files[0];
						self.processImage(index);
					},
					processImage: function(imgindex) {
						var self = this;
						var dataurl = null;
						var file = self.file;
						console.log(file)
						if (!file) return;
						var imagefile = file.type;
						var imageTypes= ["image/jpeg","image/png","image/jpg","image/svg+xml"];
						if(imageTypes.indexOf(imagefile) === -1) {
							$("#info").html("<span class='msg-error'>Please Select A valid Image File</span><br /><span>Only jpeg, jpg, png, and pdf types allowed</span>");
							return false;
							
						} else {
							var reader = new FileReader();
							
							reader.onloadend = function(e) {
								var img = document.getElementById('return'+imgindex+'');
								img.src = e.target.result;

								img.onload = function() {
									$('#media').val('');
									var can = $('#canvas'+imgindex+'')[0];
									var maxWidth = 1700 ;
									var maxHeight = 1700 ;
									var w = img.width;
									var h = img.height;
									can.width = w;
									can.height = h;
									var ctx = can.getContext("2d");
									ctx.drawImage(img, 0, 0);
									self.checkImage(img, can, w, h, maxWidth, maxHeight, imgindex, imagefile.split('image/')[1]);
								}
								
							}
							reader.readAsDataURL(file);
						}
					},
					checkImage: function(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype) {
						if (h > maxHeight) {
							this.reSize(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype)
						} else {
							if (maxHeight === 400) {
								this.drawThumb(img, can, w, h, imgindex, imgtype)
							} else {
								this.drawFull(img, can, w, h, imgindex, imgtype)
							}
						}
						
					},
					reSize: function(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype){
						can.height = h*0.75;
						can.width = w*0.75;

						var can2 = document.createElement('canvas');
						can2.width = w*0.75;
						can2.height = h*0.75;
						var ctx2 = can2.getContext('2d');
						var ctx = can.getContext('2d');
						ctx2.drawImage(img, 0, 0, w*0.75, h*0.75);
						ctx.drawImage(can2, 0, 0, w*0.75, h*0.75, 0, 0, w*0.75, h*0.75);
						w = w*0.75;
						h = h*0.75;
						img.width = w;
						img.height = h;
						this.checkImage(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype)
					},
					drawFull: function(img, can, w, h, imgindex, imgtype) {
						var self = this;
						can.height = h;
						can.width = w;
						var ctx = can.getContext('2d');
						
						ctx.drawImage(img, 0, 0, w, h);
						if (!HTMLCanvasElement.prototype.toBlob) {
						 Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
							value: function (callback, type, quality) {
								var binStr = atob( this.toDataURL(type, quality).split(',')[1] ),
								len = binStr.length,
								arr = new Uint8Array(len);
								for (var i = 0; i < len; i++ ) {
									arr[i] = binStr.charCodeAt(i);
								}
								callback( new Blob( [arr], {type: type || 'image/png'} ) );
							}
						 });
						}
						can.toBlob(function(blob) {
							var fd = new FormData();
							fd.append("img", blob);
							
							var uploadurl = '/api/uploadmedia/'+self.dindex+'/'+imgindex+'/png';
							console.log(uploadurl)
							$.ajax({
								url: uploadurl,
								type: 'POST',
								data: fd,
								processData: false,
								contentType: false,
									success: function(response) { 
									img.src = response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', '');
									img.onload = function () {
										console.log(img, response)
										$('#inputimg'+imgindex+'').val(response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''))
										var can = $('#canvas'+imgindex+'')[0];
										$('.return'+imgindex+'').attr('src', response.replace('/var/www/pu', '').replace('/Users/traceybushman/Documents/pu.bli.sh/pu', ''));
										var maxWidth = 400 ;
										var maxHeight = 400 ;
										var w = img.width;
										var h = img.height;
										self.checkImage(img, can, w, h, maxWidth, maxHeight, imgindex, imgtype);
									}
								}
							})
						}, 'image/png');
					},
					drawThumb: function(img, can, w, h, imgindex, imgtype) {
						var self = this;
						can.height = h;
						can.width = w;
						var ctx = can.getContext('2d');
						
						ctx.drawImage(img, 0, 0, w, h);
						dataurl = can.toDataURL("image/png", 0.8);
						//console.log(dataurl)
						setTimeout(function(){
							$('#inputthumb'+imgindex+'').val(dataurl.replace(/data:image\/png;base64,/, ''));
							//countUp(parseInt(counter, 10))
							self.data[dindex].properties.media[imgindex].thumb = dataurl;
							self.doc.properties.media[imgindex].thumb = dataurl;
						}, 100);
					},
					loadMap: function(cb) {
						var self = this;
						var dataLayer;

						var map = new L.map('map', { 
							center: [
								(!self.position ? 41.509859 : self.position.lat),
								(!self.position ? -112.015802 : self.position.lng)
							], 
							zoom: (!self.position ? 6 : self.position.zoom),
							zoomControl: false,
							minZoom: 2,
							maxZoom: 18
						});
						if (self.infowindow === 'tooltip') {
							L.control.zoom({
								position:'bottomleft'
							}).addTo(map);
						} else {
							L.control.zoom({
								position:'topleft'
							}).addTo(map);
						}
						
						var options3 = {
							
							attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
						};
						
						L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', options3).addTo(map);
						//L.tileLayer('https://{s}.tiles.mapbox.com/v3/tbushman.1pnqxgvi/{z}/{x}/{y}.png', map.getBounds()).addTo(map); //slc transit
						if (!self.dataLayer) {
							// generate geographic points from data
							if (this.data.length > 0) {
								dataLayer = L.geoJSON(this.data, {
									// MongoDB stores coordinates as [lng, lat]
									// Leaflet uses [lat, lng]
									onEachFeature: function (feature) {
										if (feature.geometry.type === 'Point') {
											feature.geometry.coordinates.reverse()
										}
									},
									pointToLayer: function (feature, latlng) {
										if (feature.geometry.type = 'Point') {
											//console.log(feature)
											var geojsonMarkerOptions = {
												radius: 11,
												fillColor: 'var(--highlight)',
												color: '#fff',
												weight: 2,
												opacity: 1,
												fillOpacity: 0.8,
												className: feature._id+'@'+feature.authorname+'@'+map.latLngToLayerPoint(latlng).x+','+map.latLngToLayerPoint(latlng).y+''
											};
											var circleMarker = L.circleMarker(latlng, geojsonMarkerOptions);
											return circleMarker;
										}
									}
								}).addTo(map);
								//this.dataLayer = dataLayer;

							}
						}
						//console.log(map)
						//this.map = map;
						cb(map, dataLayer)
					}
				}
			});
	